image: gradle:jdk8

# Explicit version of the Mergerequests-Pipelines workflow, with the main branch
# added.
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "main"

stages:
  - build
  - test
  - qa
  - package
  - deploy
  - publish

include:
  # Use gitlab security scanning
  - template: Dependency-Scanning.gitlab-ci.yml
  # Whitesource
  - project: 'swe/gitlab-ci'
    file: '/templates/whitesource-scanning.yml'

variables:
  BUILD_NUMBER: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle/"
  GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.daemon=false"
  HSM_IMPL: thales


######## Build stage ########
build:
  stage: build
  image: gradle:jdk8
  services:
    - postgres:12
  variables:
      POSTGRES_DB: certdb_test
      POSTGRES_USER: certdb
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres/certdb_test
      SPRING_DATASOURCE_USERNAME: certdb
      SPRING_DATASOURCE_PASSWORD: ""
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  before_script:
    - mkdir -m 755 -p /export/bad/certification/repository/{ta,online}/published
    - mkdir -m 755 -p /export/bad/certification/ta/{data,requests,responses}
  script:
    - ./gradlew -i build integrationTest
    - cat build/reports/jacoco/test/html/index.html
  artifacts:
    paths:
      - build
      - scripts/*
    reports:
      junit:
        - build/test-results/**/*.xml

build-image:
  stage: package
  needs: ["build"]
  image: gradle:jdk8
  before_script:
    - apt-get update
    - apt-get install --yes --no-install-recommends docker.io
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - gradle jib --image $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - when: on_success

image-tag-latest:
  stage: deploy
  dependencies:
    - build-image
  image: docker-registry.ripe.net/swe/gitlab-ci/debian-deployenv
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER
    - docker tag $CI_REGISTRY_IMAGE/ci:ci-step-$BUILD_NUMBER ${CI_REGISTRY_IMAGE}:latest
    - docker push ${CI_REGISTRY_IMAGE}:latest
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
    - when: manual


######### Test stage #########
sonarqube:
  stage: qa
  needs: ["build"]
  dependencies: ["build"]
  variables:
    GIT_DEPTH: 0
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  script:
    - ./gradlew -i -Dsonar.projectKey=rpki-ripe-ncc sonarqube
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "next"

######## Deploy stage ########
.docker_deploy_template: &docker_deploy_env
  stage: deploy
  needs: ["build-image"]
  image: docker-registry.ripe.net/swe/gitlab-ci/debian-deployenv
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if [ -z "${SALT_DEPLOY_TARGET}" ]; then echo "set SALT_DEPLOY_TARGET"; exit 2; fi;
    - if [ -z "${SALT_DEPLOY_USER}" ]; then echo "set SALT_DEPLOY_USER"; exit 2; fi;
    - if [ -z "${SALT_DEPLOY_PASSWORD}" ]; then echo "set SALT_DEPLOY_PASSWORD"; exit 2; fi;
    - echo "Tagging docker image ${CI_REGISTRY_IMAGE}:${BUILD_NUMBER} as :${IMAGE_TAG:-latest}"
    - docker pull $CI_REGISTRY_IMAGE:$BUILD_NUMBER
    - docker tag $CI_REGISTRY_IMAGE:$BUILD_NUMBER "${CI_REGISTRY_IMAGE}:${IMAGE_TAG:-latest}"
    - docker push "${CI_REGISTRY_IMAGE}:${IMAGE_TAG:-latest}"
    - echo "SALT_DEPLOY_TARGET=${SALT_DEPLOY_TARGET}"
    - echo "Logging into salt-api as ${SALT_DEPLOY_USER}"
    - >
      curl -f -ik https://salt.ripe.net:8000/login \
        -c ~/cookies.txt \
        -H 'Accept: application/x-yaml' \
        -d username="${SALT_DEPLOY_USER}" \
        -d password="${SALT_DEPLOY_PASSWORD}" \
        -d eauth='pam'

    # Run `docker.container_up` state because container is not
    # behind f5: No reason to use that logic
    - echo "Updating containers via salt on $SALT_DEPLOY_TARGET"
    - >
      curl -f -D "/dev/stderr" -k https://salt.ripe.net:8000 \
        -b ~/cookies.txt \
        -H 'Content-type: application/json' -d"
            [{
              \"timeout\": 120,
              \"failhard\": \"True\",
              \"client\": \"local_batch\",
              \"batch-size\": \"25%\",
              \"saltenv\": \"base\",
              \"fun\": \"state.apply\",
              \"tgt_type\": \"glob\",
              \"tgt\": \"${SALT_DEPLOY_TARGET}\",
              \"arg\": [\"docker.container_up\"],
              \"kwarg\": {
                \"pillar\": {
                  \"vars\": {
                    \"container\": \"rpki-core\",
                    \"health_endpoint\": \"${BASE_URL}/actuator\",
                    \"drain_time\": \"30\"
                  }
                }
              }
            }]
            " | jq -R '. as $raw | try fromjson catch $raw'

######## Docker instances ########
docker_deploy_uncore_prepdev:
  <<: *docker_deploy_env
  stage: deploy
  variables:
    BASE_URL: "http://uncore-1.rpki.prepdev.ripe.net:8880/certification"
    IMAGE_TAG: "prepdev"
    SALT_DEPLOY_TARGET: "uncore-*.rpki.prepdev.ripe.net"
    SALT_DEPLOY_USER: "rpkideploy"
  environment:
    name: uncore_prepdev
    url: $BASE_URL
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - when: manual


.delivr-deploy: &delivr-deploy
  stage: deploy
  needs: ["build"]
  image: $CI_REGISTRY/swe/delivr:latest
  script:
    - echo "Checking environment name $CI_ENVIRONMENT_NAME"
    - echo "Check build number $BUILD_NUMBER"
    - delivr --application rpki-core --environment $CI_ENVIRONMENT_NAME \
             --artifact-file build/distributions/rpki-ripe-ncc-${BUILD_NUMBER}.tgz

production:
  <<: *delivr-deploy
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - when: never

prepdev:
  <<: *delivr-deploy
  environment:
    name: prepdev
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - when: manual

pilot:
  <<: *delivr-deploy
  environment:
    name: pilot
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      when: never
    - when: manual

publish-to-github:
  stage: publish
  image: alpine:latest
  needs:
    - production
  before_script:
    - apk add --virtual runtime-deps bash git openssh-client
  script: |
    [ -n "$GITHUB_DEPLOY_KEY" ] || ( echo "GITHUB_DEPLOY_KEY is not set"; exit 1 )
    [ -n "$GITHUB_KNOWN_HOSTS" ] || ( echo "GITHUB_KNOWN_HOSTS is not set"; exit 1 )
    mkdir ~/.ssh && chmod 700 ~/.ssh && echo $GITHUB_KNOWN_HOSTS > ~/.ssh/known_hosts
    eval $(ssh-agent -s)
    ssh-add <(echo "$GITHUB_DEPLOY_KEY")
    ./scripts/publish-source-code --no-push --verify --committer-name 'RPKI Team at RIPE NCC' --committer-email 'rpki@ripe.net' -- $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
    - when: never
