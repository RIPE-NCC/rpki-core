plugins {
    id 'rpki-ripe-ncc.build-conventions'
    id 'org.springframework.boot' version '2.7.9'
    id 'distribution'
    id 'jacoco'
    id "com.google.cloud.tools.jib" version "3.3.1"
    id "com.google.osdetector" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

apply from: "dependencies.gradle"

// Use this style to override dependencies when needed:
// ext['log4j2.version'] = '2.17.1'

def ENV = System.getenv()
def hsmImpl = ENV['HSM_IMPL'] ?: 'api-only'

description = 'RPKI RIPE NCC'
version = ENV['BUILD_NUMBER'] ?: 'DEV'

def managedVersions = dependencyManagement.managedVersions

dependencies {
    //developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    if (osdetector.os == "osx") {
        runtimeOnly "io.netty:netty-resolver-dns-native-macos:${managedVersions['io.netty:netty-resolver-dns-native-macos']}:osx-${osdetector.arch}"
    }
    implementation 'org.flywaydb:flyway-core'

    implementation "org.webjars:jquery:3.6.4"
    implementation "org.webjars:bootstrap:4.6.2"
    implementation "org.webjars:webjars-locator-core"

    implementation "org.thymeleaf:thymeleaf:3.1.1.RELEASE"
    implementation "org.thymeleaf:thymeleaf-spring5:3.1.1.RELEASE"

    implementation platform('io.sentry:sentry-bom:6.16.0')
    implementation 'io.sentry:sentry-spring-boot-starter'
    implementation 'io.sentry:sentry-logback'

    implementation "net.ripe.rpki:rpki-commons:$rpki_commons_version"

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.postgresql:postgresql:42.6.0'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.jamesmurty.utils:java-xmlbuilder:1.3'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'
    implementation 'commons-lang:commons-lang:2.6'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.junit.vintage:junit-vintage-engine') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'net.jqwik:jqwik:1.7.3'
    testImplementation "net.ripe.rpki:rpki-commons:$rpki_commons_version:tests"
    testImplementation 'org.assertj:assertj-core'


    implementation (project(':hsm')) {
        capabilities {
            requireCapability('net.ripe.rpki.hsm:' + hsmImpl)
        }
    }

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

sourceSets {
    main {
        resources {
            srcDir 'public'
            // Wicket resources are in src/main/java
            srcDir 'src/main/java'
        }
    }
    integration {
        java.srcDir 'src/integration/java'
        resources.srcDir 'src/integration/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

tasks.withType(Test) {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter', 'junit-vintage'
    }
}

task integrationTest(type: Test) {
     description = 'Run system integration tests. Requires network access.';
     group = 'verification'
     testClassesDirs = sourceSets.integration.output.classesDirs
     classpath = sourceSets.integration.runtimeClasspath
     mustRunAfter test
}

// run integration tests as part of `check`
tasks.named('check') {
    dependsOn tasks.named('integrationTest')
}


bootRun {
    systemProperty 'spring.profiles.active', 'local'
}

bootJar {
    archiveFileName = "rpki-ripe-ncc.jar"
}

distributions {
    main {
        contents {
            from bootJar.outputs
            from 'etc/ssl'
        }
    }
}

jib {
    from {
        image = "openjdk:11-jdk-slim"
    }
    to {
        image = "docker-registry.ripe.net/rpki/rpki-ripe-ncc"
    }
    container {
        labels = [
            "org.label-schema.vcs-ref": "${-> project.ext.gitProps['git.commit.id.abbrev']}",
            "net.ripe.rpki.hsm": "${-> hsmImpl}"
        ]
    }
};
