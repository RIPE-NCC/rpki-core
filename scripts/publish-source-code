#!/usr/bin/env bash
# shellcheck shell=bash

PROGRAM="publish-source-code"

set -eo pipefail

oops() {
    echo "$PROGRAM: $*" >&2
    exit 1
}

show_usage() {
    cat <<EOF
Usage:
    $PROGRAM <oldbase> [<newbase>]

Options:
    -h, --help         Print this message.
    --[no-]push        Enable/disable pushing the new branch to the origin.
    --[no-]verify      Enable/disable verifying that the published ref is equivalent to <newbase>.
    --repository       Remote URL for publication. Defaults to $REPOSITORY
    --upstream         Upstream branch to publish changes onto. Defaults to $UPSTREAM.
    --local-branch     Local branch name used to track upstream. Defaults to $LOCAL_BRANCH.
    --local-remote     Local name of remote repository. Defaults to $LOCAL_REMOTE.
    --committer-name   Committer name to override 'user.name'.
    --committer-email  Committer email to override 'user.email'.

EOF
}

check_dependencies() {
    GIT=$(command -v git) || oops "command not found: git"
}

rev_parse() {
    $GIT rev-parse --quiet --revs-only --verify --short "$1" || oops "$1: unknown revision"
}

check_commit() {
    [ "$($GIT cat-file -t "$1" 2>/dev/null)" == "commit" ] || oops "$1: not a commit"
}

branch_exists() {
    $GIT rev-parse --quiet --verify "$1" &>/dev/null
}

remote_exists() {
    $GIT remote | grep -e "^${1}\$" &>/dev/null
}

check_no_diff() {
    $GIT diff --quiet --exit-code "$1" "$2"
}

REPOSITORY="git@github.com:RIPE-NCC/rpki-core.git"
PUSH=1
VERIFY=0
UPSTREAM=main
LOCAL_BRANCH=proscribo
LOCAL_REMOTE=publicus

main() {
    check_dependencies

    while true; do
        case $1 in
            -h|--help) show_usage; exit 0 ;;
            --push) PUSH=1; shift ;;
            --no-push) PUSH=0; shift ;;
            --verify) VERIFY=1; shift ;;
            --no-verify) VERIFY=0; shift ;;
            --repository) shift; REPOSITORY=$1; shift ;;
            --upstream) shift; UPSTREAM=$1; shift ;;
            --local-branch) shift; LOCAL_BRANCH=$1; shift ;;
            --local-remote) shift; LOCAL_REMOTE=$1; shift ;;
            --committer-name)
                shift
                export GIT_AUTHOR_NAME=$1
                export GIT_COMMITTER_NAME=$1
                shift ;;
            --committer-email)
                shift
                export GIT_AUTHOR_EMAIL=$1
                export GIT_COMMITTER_EMAIL=$1
                shift ;;
            --) shift; break ;;
            -*) oops "$1: unknown option" ;;
            *) break ;;
        esac
    done

    [ -n "$1" ] || oops "<oldbase> is not specified"
    remote_exists "$LOCAL_REMOTE" && oops "local remote $LOCAL_REMOTE already exists"
    branch_exists "$LOCAL_BRANCH" && oops "local branch $LOCAL_BRANCH already exists"

    oldbase=$(rev_parse "$1")
    newbase=$(rev_parse "${2:-HEAD}")
    branch=$LOCAL_BRANCH
    remote=$LOCAL_REMOTE

    check_commit "$oldbase"
    check_commit "$newbase"

    changelog=$($GIT log --no-merges --format='* %s [%h]' "$oldbase..$newbase")
    if [ -z "$changelog" ]; then
        echo "No changes found between $1 and ${2:-HEAD}; nothing to publish."
        exit 0
    fi
    cat <<EOF
Changelog:

$changelog

EOF

    echo "Adding remote repository"
    $GIT remote add "$remote" "$REPOSITORY"
    $GIT fetch --quiet "$remote"
    echo

    echo "Squashing changes between $oldbase and $newbase"
    $GIT switch --quiet --no-track -c "$branch" "$oldbase"
    $GIT merge --quiet --squash "$newbase" >/dev/null
    $GIT commit --quiet --no-gpg-sign -F- <<EOF
RIPE NCC has merged $newbase

$changelog
EOF
    rev=$(rev_parse HEAD)
    $GIT switch --quiet --detach "$rev"
    $GIT branch --quiet -D "$branch"

    echo "Applying $rev on top of upstream"
    $GIT switch --quiet --no-track --create "$branch" "$remote/$UPSTREAM"
    $GIT cherry-pick --no-gpg-sign "$rev" ||
        ($GIT cherry-pick --abort && oops "Failed to apply changes on top of upstream")
    echo

    if [ "$VERIFY" -eq 1 ]; then
       check_no_diff "$newbase" "HEAD" || oops "Published code differs from $newbase after applying diff"
    fi

    if [ "$PUSH" -eq 1 ]; then
        echo "Pushing to $UPSTREAM in remote repository"
        $GIT push --quiet "$remote" HEAD:"$UPSTREAM"
    else
        cat <<EOF
Skip pushing to $UPSTREAM in remote repository. To manually push these changes you can run:

  $GIT push '$remote' HEAD:$UPSTREAM"

EOF
    fi
}

main "${@}"
